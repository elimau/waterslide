// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: init-config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_init_2dconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_init_2dconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_init_2dconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_init_2dconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
class InitConfig;
struct InitConfigDefaultTypeInternal;
extern InitConfigDefaultTypeInternal _InitConfig_default_instance_;
class InitConfig_Audio;
struct InitConfig_AudioDefaultTypeInternal;
extern InitConfig_AudioDefaultTypeInternal _InitConfig_Audio_default_instance_;
class InitConfig_Endpoint;
struct InitConfig_EndpointDefaultTypeInternal;
extern InitConfig_EndpointDefaultTypeInternal _InitConfig_Endpoint_default_instance_;
class InitConfig_Fec;
struct InitConfig_FecDefaultTypeInternal;
extern InitConfig_FecDefaultTypeInternal _InitConfig_Fec_default_instance_;
class InitConfig_Monitor;
struct InitConfig_MonitorDefaultTypeInternal;
extern InitConfig_MonitorDefaultTypeInternal _InitConfig_Monitor_default_instance_;
class InitConfig_Mux;
struct InitConfig_MuxDefaultTypeInternal;
extern InitConfig_MuxDefaultTypeInternal _InitConfig_Mux_default_instance_;
class InitConfig_Opus;
struct InitConfig_OpusDefaultTypeInternal;
extern InitConfig_OpusDefaultTypeInternal _InitConfig_Opus_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::InitConfig* Arena::CreateMaybeMessage<::InitConfig>(Arena*);
template<> ::InitConfig_Audio* Arena::CreateMaybeMessage<::InitConfig_Audio>(Arena*);
template<> ::InitConfig_Endpoint* Arena::CreateMaybeMessage<::InitConfig_Endpoint>(Arena*);
template<> ::InitConfig_Fec* Arena::CreateMaybeMessage<::InitConfig_Fec>(Arena*);
template<> ::InitConfig_Monitor* Arena::CreateMaybeMessage<::InitConfig_Monitor>(Arena*);
template<> ::InitConfig_Mux* Arena::CreateMaybeMessage<::InitConfig_Mux>(Arena*);
template<> ::InitConfig_Opus* Arena::CreateMaybeMessage<::InitConfig_Opus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum InitConfig_Mode : int {
  InitConfig_Mode_SENDER = 0,
  InitConfig_Mode_RECEIVER = 1,
  InitConfig_Mode_InitConfig_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InitConfig_Mode_InitConfig_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool InitConfig_Mode_IsValid(int value);
constexpr InitConfig_Mode InitConfig_Mode_Mode_MIN = InitConfig_Mode_SENDER;
constexpr InitConfig_Mode InitConfig_Mode_Mode_MAX = InitConfig_Mode_RECEIVER;
constexpr int InitConfig_Mode_Mode_ARRAYSIZE = InitConfig_Mode_Mode_MAX + 1;

const std::string& InitConfig_Mode_Name(InitConfig_Mode value);
template<typename T>
inline const std::string& InitConfig_Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InitConfig_Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InitConfig_Mode_Name.");
  return InitConfig_Mode_Name(static_cast<InitConfig_Mode>(enum_t_value));
}
bool InitConfig_Mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InitConfig_Mode* value);
// ===================================================================

class InitConfig_Endpoint final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:InitConfig.Endpoint) */ {
 public:
  inline InitConfig_Endpoint() : InitConfig_Endpoint(nullptr) {}
  ~InitConfig_Endpoint() override;
  explicit constexpr InitConfig_Endpoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitConfig_Endpoint(const InitConfig_Endpoint& from);
  InitConfig_Endpoint(InitConfig_Endpoint&& from) noexcept
    : InitConfig_Endpoint() {
    *this = ::std::move(from);
  }

  inline InitConfig_Endpoint& operator=(const InitConfig_Endpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitConfig_Endpoint& operator=(InitConfig_Endpoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const InitConfig_Endpoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitConfig_Endpoint* internal_default_instance() {
    return reinterpret_cast<const InitConfig_Endpoint*>(
               &_InitConfig_Endpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InitConfig_Endpoint& a, InitConfig_Endpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(InitConfig_Endpoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitConfig_Endpoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitConfig_Endpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitConfig_Endpoint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InitConfig_Endpoint& from);
  void MergeFrom(const InitConfig_Endpoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InitConfig_Endpoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InitConfig.Endpoint";
  }
  protected:
  explicit InitConfig_Endpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // bytes addr = 1;
  void clear_addr();
  const std::string& addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_addr();
  PROTOBUF_NODISCARD std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // int32 port = 2;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:InitConfig.Endpoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  int32_t port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_init_2dconfig_2eproto;
};
// -------------------------------------------------------------------

class InitConfig_Mux final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:InitConfig.Mux) */ {
 public:
  inline InitConfig_Mux() : InitConfig_Mux(nullptr) {}
  ~InitConfig_Mux() override;
  explicit constexpr InitConfig_Mux(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitConfig_Mux(const InitConfig_Mux& from);
  InitConfig_Mux(InitConfig_Mux&& from) noexcept
    : InitConfig_Mux() {
    *this = ::std::move(from);
  }

  inline InitConfig_Mux& operator=(const InitConfig_Mux& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitConfig_Mux& operator=(InitConfig_Mux&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const InitConfig_Mux& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitConfig_Mux* internal_default_instance() {
    return reinterpret_cast<const InitConfig_Mux*>(
               &_InitConfig_Mux_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InitConfig_Mux& a, InitConfig_Mux& b) {
    a.Swap(&b);
  }
  inline void Swap(InitConfig_Mux* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitConfig_Mux* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitConfig_Mux* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitConfig_Mux>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InitConfig_Mux& from);
  void MergeFrom(const InitConfig_Mux& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InitConfig_Mux* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InitConfig.Mux";
  }
  protected:
  explicit InitConfig_Mux(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxChannelsFieldNumber = 1,
    kMaxPacketSizeFieldNumber = 2,
  };
  // int32 maxChannels = 1;
  void clear_maxchannels();
  int32_t maxchannels() const;
  void set_maxchannels(int32_t value);
  private:
  int32_t _internal_maxchannels() const;
  void _internal_set_maxchannels(int32_t value);
  public:

  // int32 maxPacketSize = 2;
  void clear_maxpacketsize();
  int32_t maxpacketsize() const;
  void set_maxpacketsize(int32_t value);
  private:
  int32_t _internal_maxpacketsize() const;
  void _internal_set_maxpacketsize(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:InitConfig.Mux)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t maxchannels_;
  int32_t maxpacketsize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_init_2dconfig_2eproto;
};
// -------------------------------------------------------------------

class InitConfig_Audio final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:InitConfig.Audio) */ {
 public:
  inline InitConfig_Audio() : InitConfig_Audio(nullptr) {}
  ~InitConfig_Audio() override;
  explicit constexpr InitConfig_Audio(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitConfig_Audio(const InitConfig_Audio& from);
  InitConfig_Audio(InitConfig_Audio&& from) noexcept
    : InitConfig_Audio() {
    *this = ::std::move(from);
  }

  inline InitConfig_Audio& operator=(const InitConfig_Audio& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitConfig_Audio& operator=(InitConfig_Audio&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const InitConfig_Audio& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitConfig_Audio* internal_default_instance() {
    return reinterpret_cast<const InitConfig_Audio*>(
               &_InitConfig_Audio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InitConfig_Audio& a, InitConfig_Audio& b) {
    a.Swap(&b);
  }
  inline void Swap(InitConfig_Audio* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitConfig_Audio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitConfig_Audio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitConfig_Audio>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InitConfig_Audio& from);
  void MergeFrom(const InitConfig_Audio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InitConfig_Audio* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InitConfig.Audio";
  }
  protected:
  explicit InitConfig_Audio(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 3,
    kChannelCountFieldNumber = 1,
    kIoSampleRateFieldNumber = 2,
    kLevelSlowAttackFieldNumber = 4,
    kLevelSlowReleaseFieldNumber = 5,
    kLevelFastAttackFieldNumber = 6,
    kLevelFastReleaseFieldNumber = 7,
  };
  // string deviceName = 3;
  void clear_devicename();
  const std::string& devicename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_devicename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_devicename();
  PROTOBUF_NODISCARD std::string* release_devicename();
  void set_allocated_devicename(std::string* devicename);
  private:
  const std::string& _internal_devicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicename(const std::string& value);
  std::string* _internal_mutable_devicename();
  public:

  // int32 channelCount = 1;
  void clear_channelcount();
  int32_t channelcount() const;
  void set_channelcount(int32_t value);
  private:
  int32_t _internal_channelcount() const;
  void _internal_set_channelcount(int32_t value);
  public:

  // int32 ioSampleRate = 2;
  void clear_iosamplerate();
  int32_t iosamplerate() const;
  void set_iosamplerate(int32_t value);
  private:
  int32_t _internal_iosamplerate() const;
  void _internal_set_iosamplerate(int32_t value);
  public:

  // float levelSlowAttack = 4;
  void clear_levelslowattack();
  float levelslowattack() const;
  void set_levelslowattack(float value);
  private:
  float _internal_levelslowattack() const;
  void _internal_set_levelslowattack(float value);
  public:

  // float levelSlowRelease = 5;
  void clear_levelslowrelease();
  float levelslowrelease() const;
  void set_levelslowrelease(float value);
  private:
  float _internal_levelslowrelease() const;
  void _internal_set_levelslowrelease(float value);
  public:

  // float levelFastAttack = 6;
  void clear_levelfastattack();
  float levelfastattack() const;
  void set_levelfastattack(float value);
  private:
  float _internal_levelfastattack() const;
  void _internal_set_levelfastattack(float value);
  public:

  // float levelFastRelease = 7;
  void clear_levelfastrelease();
  float levelfastrelease() const;
  void set_levelfastrelease(float value);
  private:
  float _internal_levelfastrelease() const;
  void _internal_set_levelfastrelease(float value);
  public:

  // @@protoc_insertion_point(class_scope:InitConfig.Audio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicename_;
  int32_t channelcount_;
  int32_t iosamplerate_;
  float levelslowattack_;
  float levelslowrelease_;
  float levelfastattack_;
  float levelfastrelease_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_init_2dconfig_2eproto;
};
// -------------------------------------------------------------------

class InitConfig_Opus final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:InitConfig.Opus) */ {
 public:
  inline InitConfig_Opus() : InitConfig_Opus(nullptr) {}
  ~InitConfig_Opus() override;
  explicit constexpr InitConfig_Opus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitConfig_Opus(const InitConfig_Opus& from);
  InitConfig_Opus(InitConfig_Opus&& from) noexcept
    : InitConfig_Opus() {
    *this = ::std::move(from);
  }

  inline InitConfig_Opus& operator=(const InitConfig_Opus& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitConfig_Opus& operator=(InitConfig_Opus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const InitConfig_Opus& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitConfig_Opus* internal_default_instance() {
    return reinterpret_cast<const InitConfig_Opus*>(
               &_InitConfig_Opus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InitConfig_Opus& a, InitConfig_Opus& b) {
    a.Swap(&b);
  }
  inline void Swap(InitConfig_Opus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitConfig_Opus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitConfig_Opus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitConfig_Opus>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InitConfig_Opus& from);
  void MergeFrom(const InitConfig_Opus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InitConfig_Opus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InitConfig.Opus";
  }
  protected:
  explicit InitConfig_Opus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitrateFieldNumber = 1,
    kFrameSizeFieldNumber = 2,
    kMaxPacketSizeFieldNumber = 3,
    kSampleRateFieldNumber = 4,
    kEncodeRingLengthFieldNumber = 5,
    kDecodeRingLengthFieldNumber = 6,
  };
  // int32 bitrate = 1;
  void clear_bitrate();
  int32_t bitrate() const;
  void set_bitrate(int32_t value);
  private:
  int32_t _internal_bitrate() const;
  void _internal_set_bitrate(int32_t value);
  public:

  // int32 frameSize = 2;
  void clear_framesize();
  int32_t framesize() const;
  void set_framesize(int32_t value);
  private:
  int32_t _internal_framesize() const;
  void _internal_set_framesize(int32_t value);
  public:

  // int32 maxPacketSize = 3;
  void clear_maxpacketsize();
  int32_t maxpacketsize() const;
  void set_maxpacketsize(int32_t value);
  private:
  int32_t _internal_maxpacketsize() const;
  void _internal_set_maxpacketsize(int32_t value);
  public:

  // int32 sampleRate = 4;
  void clear_samplerate();
  int32_t samplerate() const;
  void set_samplerate(int32_t value);
  private:
  int32_t _internal_samplerate() const;
  void _internal_set_samplerate(int32_t value);
  public:

  // int32 encodeRingLength = 5;
  void clear_encoderinglength();
  int32_t encoderinglength() const;
  void set_encoderinglength(int32_t value);
  private:
  int32_t _internal_encoderinglength() const;
  void _internal_set_encoderinglength(int32_t value);
  public:

  // int32 decodeRingLength = 6;
  void clear_decoderinglength();
  int32_t decoderinglength() const;
  void set_decoderinglength(int32_t value);
  private:
  int32_t _internal_decoderinglength() const;
  void _internal_set_decoderinglength(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:InitConfig.Opus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t bitrate_;
  int32_t framesize_;
  int32_t maxpacketsize_;
  int32_t samplerate_;
  int32_t encoderinglength_;
  int32_t decoderinglength_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_init_2dconfig_2eproto;
};
// -------------------------------------------------------------------

class InitConfig_Fec final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:InitConfig.Fec) */ {
 public:
  inline InitConfig_Fec() : InitConfig_Fec(nullptr) {}
  ~InitConfig_Fec() override;
  explicit constexpr InitConfig_Fec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitConfig_Fec(const InitConfig_Fec& from);
  InitConfig_Fec(InitConfig_Fec&& from) noexcept
    : InitConfig_Fec() {
    *this = ::std::move(from);
  }

  inline InitConfig_Fec& operator=(const InitConfig_Fec& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitConfig_Fec& operator=(InitConfig_Fec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const InitConfig_Fec& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitConfig_Fec* internal_default_instance() {
    return reinterpret_cast<const InitConfig_Fec*>(
               &_InitConfig_Fec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InitConfig_Fec& a, InitConfig_Fec& b) {
    a.Swap(&b);
  }
  inline void Swap(InitConfig_Fec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitConfig_Fec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitConfig_Fec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitConfig_Fec>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InitConfig_Fec& from);
  void MergeFrom(const InitConfig_Fec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InitConfig_Fec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InitConfig.Fec";
  }
  protected:
  explicit InitConfig_Fec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolLenFieldNumber = 1,
    kSourceSymbolsPerBlockFieldNumber = 2,
    kRepairSymbolsPerBlockFieldNumber = 3,
  };
  // int32 symbolLen = 1;
  void clear_symbollen();
  int32_t symbollen() const;
  void set_symbollen(int32_t value);
  private:
  int32_t _internal_symbollen() const;
  void _internal_set_symbollen(int32_t value);
  public:

  // int32 sourceSymbolsPerBlock = 2;
  void clear_sourcesymbolsperblock();
  int32_t sourcesymbolsperblock() const;
  void set_sourcesymbolsperblock(int32_t value);
  private:
  int32_t _internal_sourcesymbolsperblock() const;
  void _internal_set_sourcesymbolsperblock(int32_t value);
  public:

  // int32 repairSymbolsPerBlock = 3;
  void clear_repairsymbolsperblock();
  int32_t repairsymbolsperblock() const;
  void set_repairsymbolsperblock(int32_t value);
  private:
  int32_t _internal_repairsymbolsperblock() const;
  void _internal_set_repairsymbolsperblock(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:InitConfig.Fec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t symbollen_;
  int32_t sourcesymbolsperblock_;
  int32_t repairsymbolsperblock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_init_2dconfig_2eproto;
};
// -------------------------------------------------------------------

class InitConfig_Monitor final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:InitConfig.Monitor) */ {
 public:
  inline InitConfig_Monitor() : InitConfig_Monitor(nullptr) {}
  ~InitConfig_Monitor() override;
  explicit constexpr InitConfig_Monitor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitConfig_Monitor(const InitConfig_Monitor& from);
  InitConfig_Monitor(InitConfig_Monitor&& from) noexcept
    : InitConfig_Monitor() {
    *this = ::std::move(from);
  }

  inline InitConfig_Monitor& operator=(const InitConfig_Monitor& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitConfig_Monitor& operator=(InitConfig_Monitor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const InitConfig_Monitor& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitConfig_Monitor* internal_default_instance() {
    return reinterpret_cast<const InitConfig_Monitor*>(
               &_InitConfig_Monitor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InitConfig_Monitor& a, InitConfig_Monitor& b) {
    a.Swap(&b);
  }
  inline void Swap(InitConfig_Monitor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitConfig_Monitor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitConfig_Monitor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitConfig_Monitor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InitConfig_Monitor& from);
  void MergeFrom(const InitConfig_Monitor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InitConfig_Monitor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InitConfig.Monitor";
  }
  protected:
  explicit InitConfig_Monitor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWsPortFieldNumber = 1,
  };
  // int32 wsPort = 1;
  void clear_wsport();
  int32_t wsport() const;
  void set_wsport(int32_t value);
  private:
  int32_t _internal_wsport() const;
  void _internal_set_wsport(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:InitConfig.Monitor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t wsport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_init_2dconfig_2eproto;
};
// -------------------------------------------------------------------

class InitConfig final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:InitConfig) */ {
 public:
  inline InitConfig() : InitConfig(nullptr) {}
  ~InitConfig() override;
  explicit constexpr InitConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitConfig(const InitConfig& from);
  InitConfig(InitConfig&& from) noexcept
    : InitConfig() {
    *this = ::std::move(from);
  }

  inline InitConfig& operator=(const InitConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitConfig& operator=(InitConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const InitConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitConfig* internal_default_instance() {
    return reinterpret_cast<const InitConfig*>(
               &_InitConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InitConfig& a, InitConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(InitConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InitConfig& from);
  void MergeFrom(const InitConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InitConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InitConfig";
  }
  protected:
  explicit InitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef InitConfig_Endpoint Endpoint;
  typedef InitConfig_Mux Mux;
  typedef InitConfig_Audio Audio;
  typedef InitConfig_Opus Opus;
  typedef InitConfig_Fec Fec;
  typedef InitConfig_Monitor Monitor;

  typedef InitConfig_Mode Mode;
  static constexpr Mode SENDER =
    InitConfig_Mode_SENDER;
  static constexpr Mode RECEIVER =
    InitConfig_Mode_RECEIVER;
  static inline bool Mode_IsValid(int value) {
    return InitConfig_Mode_IsValid(value);
  }
  static constexpr Mode Mode_MIN =
    InitConfig_Mode_Mode_MIN;
  static constexpr Mode Mode_MAX =
    InitConfig_Mode_Mode_MAX;
  static constexpr int Mode_ARRAYSIZE =
    InitConfig_Mode_Mode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Mode_Name.");
    return InitConfig_Mode_Name(enum_t_value);
  }
  static inline bool Mode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Mode* value) {
    return InitConfig_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEndpointsFieldNumber = 2,
    kMuxFieldNumber = 3,
    kAudioFieldNumber = 4,
    kOpusFieldNumber = 5,
    kFecFieldNumber = 6,
    kMonitorFieldNumber = 7,
    kModeFieldNumber = 1,
  };
  // repeated .InitConfig.Endpoint endpoints = 2;
  int endpoints_size() const;
  private:
  int _internal_endpoints_size() const;
  public:
  void clear_endpoints();
  ::InitConfig_Endpoint* mutable_endpoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InitConfig_Endpoint >*
      mutable_endpoints();
  private:
  const ::InitConfig_Endpoint& _internal_endpoints(int index) const;
  ::InitConfig_Endpoint* _internal_add_endpoints();
  public:
  const ::InitConfig_Endpoint& endpoints(int index) const;
  ::InitConfig_Endpoint* add_endpoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InitConfig_Endpoint >&
      endpoints() const;

  // .InitConfig.Mux mux = 3;
  bool has_mux() const;
  private:
  bool _internal_has_mux() const;
  public:
  void clear_mux();
  const ::InitConfig_Mux& mux() const;
  PROTOBUF_NODISCARD ::InitConfig_Mux* release_mux();
  ::InitConfig_Mux* mutable_mux();
  void set_allocated_mux(::InitConfig_Mux* mux);
  private:
  const ::InitConfig_Mux& _internal_mux() const;
  ::InitConfig_Mux* _internal_mutable_mux();
  public:
  void unsafe_arena_set_allocated_mux(
      ::InitConfig_Mux* mux);
  ::InitConfig_Mux* unsafe_arena_release_mux();

  // .InitConfig.Audio audio = 4;
  bool has_audio() const;
  private:
  bool _internal_has_audio() const;
  public:
  void clear_audio();
  const ::InitConfig_Audio& audio() const;
  PROTOBUF_NODISCARD ::InitConfig_Audio* release_audio();
  ::InitConfig_Audio* mutable_audio();
  void set_allocated_audio(::InitConfig_Audio* audio);
  private:
  const ::InitConfig_Audio& _internal_audio() const;
  ::InitConfig_Audio* _internal_mutable_audio();
  public:
  void unsafe_arena_set_allocated_audio(
      ::InitConfig_Audio* audio);
  ::InitConfig_Audio* unsafe_arena_release_audio();

  // .InitConfig.Opus opus = 5;
  bool has_opus() const;
  private:
  bool _internal_has_opus() const;
  public:
  void clear_opus();
  const ::InitConfig_Opus& opus() const;
  PROTOBUF_NODISCARD ::InitConfig_Opus* release_opus();
  ::InitConfig_Opus* mutable_opus();
  void set_allocated_opus(::InitConfig_Opus* opus);
  private:
  const ::InitConfig_Opus& _internal_opus() const;
  ::InitConfig_Opus* _internal_mutable_opus();
  public:
  void unsafe_arena_set_allocated_opus(
      ::InitConfig_Opus* opus);
  ::InitConfig_Opus* unsafe_arena_release_opus();

  // .InitConfig.Fec fec = 6;
  bool has_fec() const;
  private:
  bool _internal_has_fec() const;
  public:
  void clear_fec();
  const ::InitConfig_Fec& fec() const;
  PROTOBUF_NODISCARD ::InitConfig_Fec* release_fec();
  ::InitConfig_Fec* mutable_fec();
  void set_allocated_fec(::InitConfig_Fec* fec);
  private:
  const ::InitConfig_Fec& _internal_fec() const;
  ::InitConfig_Fec* _internal_mutable_fec();
  public:
  void unsafe_arena_set_allocated_fec(
      ::InitConfig_Fec* fec);
  ::InitConfig_Fec* unsafe_arena_release_fec();

  // .InitConfig.Monitor monitor = 7;
  bool has_monitor() const;
  private:
  bool _internal_has_monitor() const;
  public:
  void clear_monitor();
  const ::InitConfig_Monitor& monitor() const;
  PROTOBUF_NODISCARD ::InitConfig_Monitor* release_monitor();
  ::InitConfig_Monitor* mutable_monitor();
  void set_allocated_monitor(::InitConfig_Monitor* monitor);
  private:
  const ::InitConfig_Monitor& _internal_monitor() const;
  ::InitConfig_Monitor* _internal_mutable_monitor();
  public:
  void unsafe_arena_set_allocated_monitor(
      ::InitConfig_Monitor* monitor);
  ::InitConfig_Monitor* unsafe_arena_release_monitor();

  // .InitConfig.Mode mode = 1;
  void clear_mode();
  ::InitConfig_Mode mode() const;
  void set_mode(::InitConfig_Mode value);
  private:
  ::InitConfig_Mode _internal_mode() const;
  void _internal_set_mode(::InitConfig_Mode value);
  public:

  // @@protoc_insertion_point(class_scope:InitConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InitConfig_Endpoint > endpoints_;
  ::InitConfig_Mux* mux_;
  ::InitConfig_Audio* audio_;
  ::InitConfig_Opus* opus_;
  ::InitConfig_Fec* fec_;
  ::InitConfig_Monitor* monitor_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_init_2dconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InitConfig_Endpoint

// bytes addr = 1;
inline void InitConfig_Endpoint::clear_addr() {
  addr_.ClearToEmpty();
}
inline const std::string& InitConfig_Endpoint::addr() const {
  // @@protoc_insertion_point(field_get:InitConfig.Endpoint.addr)
  return _internal_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitConfig_Endpoint::set_addr(ArgT0&& arg0, ArgT... args) {
 
 addr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InitConfig.Endpoint.addr)
}
inline std::string* InitConfig_Endpoint::mutable_addr() {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:InitConfig.Endpoint.addr)
  return _s;
}
inline const std::string& InitConfig_Endpoint::_internal_addr() const {
  return addr_.Get();
}
inline void InitConfig_Endpoint::_internal_set_addr(const std::string& value) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitConfig_Endpoint::_internal_mutable_addr() {
  
  return addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitConfig_Endpoint::release_addr() {
  // @@protoc_insertion_point(field_release:InitConfig.Endpoint.addr)
  return addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitConfig_Endpoint::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (addr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InitConfig.Endpoint.addr)
}

// int32 port = 2;
inline void InitConfig_Endpoint::clear_port() {
  port_ = 0;
}
inline int32_t InitConfig_Endpoint::_internal_port() const {
  return port_;
}
inline int32_t InitConfig_Endpoint::port() const {
  // @@protoc_insertion_point(field_get:InitConfig.Endpoint.port)
  return _internal_port();
}
inline void InitConfig_Endpoint::_internal_set_port(int32_t value) {
  
  port_ = value;
}
inline void InitConfig_Endpoint::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:InitConfig.Endpoint.port)
}

// -------------------------------------------------------------------

// InitConfig_Mux

// int32 maxChannels = 1;
inline void InitConfig_Mux::clear_maxchannels() {
  maxchannels_ = 0;
}
inline int32_t InitConfig_Mux::_internal_maxchannels() const {
  return maxchannels_;
}
inline int32_t InitConfig_Mux::maxchannels() const {
  // @@protoc_insertion_point(field_get:InitConfig.Mux.maxChannels)
  return _internal_maxchannels();
}
inline void InitConfig_Mux::_internal_set_maxchannels(int32_t value) {
  
  maxchannels_ = value;
}
inline void InitConfig_Mux::set_maxchannels(int32_t value) {
  _internal_set_maxchannels(value);
  // @@protoc_insertion_point(field_set:InitConfig.Mux.maxChannels)
}

// int32 maxPacketSize = 2;
inline void InitConfig_Mux::clear_maxpacketsize() {
  maxpacketsize_ = 0;
}
inline int32_t InitConfig_Mux::_internal_maxpacketsize() const {
  return maxpacketsize_;
}
inline int32_t InitConfig_Mux::maxpacketsize() const {
  // @@protoc_insertion_point(field_get:InitConfig.Mux.maxPacketSize)
  return _internal_maxpacketsize();
}
inline void InitConfig_Mux::_internal_set_maxpacketsize(int32_t value) {
  
  maxpacketsize_ = value;
}
inline void InitConfig_Mux::set_maxpacketsize(int32_t value) {
  _internal_set_maxpacketsize(value);
  // @@protoc_insertion_point(field_set:InitConfig.Mux.maxPacketSize)
}

// -------------------------------------------------------------------

// InitConfig_Audio

// int32 channelCount = 1;
inline void InitConfig_Audio::clear_channelcount() {
  channelcount_ = 0;
}
inline int32_t InitConfig_Audio::_internal_channelcount() const {
  return channelcount_;
}
inline int32_t InitConfig_Audio::channelcount() const {
  // @@protoc_insertion_point(field_get:InitConfig.Audio.channelCount)
  return _internal_channelcount();
}
inline void InitConfig_Audio::_internal_set_channelcount(int32_t value) {
  
  channelcount_ = value;
}
inline void InitConfig_Audio::set_channelcount(int32_t value) {
  _internal_set_channelcount(value);
  // @@protoc_insertion_point(field_set:InitConfig.Audio.channelCount)
}

// int32 ioSampleRate = 2;
inline void InitConfig_Audio::clear_iosamplerate() {
  iosamplerate_ = 0;
}
inline int32_t InitConfig_Audio::_internal_iosamplerate() const {
  return iosamplerate_;
}
inline int32_t InitConfig_Audio::iosamplerate() const {
  // @@protoc_insertion_point(field_get:InitConfig.Audio.ioSampleRate)
  return _internal_iosamplerate();
}
inline void InitConfig_Audio::_internal_set_iosamplerate(int32_t value) {
  
  iosamplerate_ = value;
}
inline void InitConfig_Audio::set_iosamplerate(int32_t value) {
  _internal_set_iosamplerate(value);
  // @@protoc_insertion_point(field_set:InitConfig.Audio.ioSampleRate)
}

// string deviceName = 3;
inline void InitConfig_Audio::clear_devicename() {
  devicename_.ClearToEmpty();
}
inline const std::string& InitConfig_Audio::devicename() const {
  // @@protoc_insertion_point(field_get:InitConfig.Audio.deviceName)
  return _internal_devicename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitConfig_Audio::set_devicename(ArgT0&& arg0, ArgT... args) {
 
 devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InitConfig.Audio.deviceName)
}
inline std::string* InitConfig_Audio::mutable_devicename() {
  std::string* _s = _internal_mutable_devicename();
  // @@protoc_insertion_point(field_mutable:InitConfig.Audio.deviceName)
  return _s;
}
inline const std::string& InitConfig_Audio::_internal_devicename() const {
  return devicename_.Get();
}
inline void InitConfig_Audio::_internal_set_devicename(const std::string& value) {
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitConfig_Audio::_internal_mutable_devicename() {
  
  return devicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitConfig_Audio::release_devicename() {
  // @@protoc_insertion_point(field_release:InitConfig.Audio.deviceName)
  return devicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitConfig_Audio::set_allocated_devicename(std::string* devicename) {
  if (devicename != nullptr) {
    
  } else {
    
  }
  devicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (devicename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    devicename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InitConfig.Audio.deviceName)
}

// float levelSlowAttack = 4;
inline void InitConfig_Audio::clear_levelslowattack() {
  levelslowattack_ = 0;
}
inline float InitConfig_Audio::_internal_levelslowattack() const {
  return levelslowattack_;
}
inline float InitConfig_Audio::levelslowattack() const {
  // @@protoc_insertion_point(field_get:InitConfig.Audio.levelSlowAttack)
  return _internal_levelslowattack();
}
inline void InitConfig_Audio::_internal_set_levelslowattack(float value) {
  
  levelslowattack_ = value;
}
inline void InitConfig_Audio::set_levelslowattack(float value) {
  _internal_set_levelslowattack(value);
  // @@protoc_insertion_point(field_set:InitConfig.Audio.levelSlowAttack)
}

// float levelSlowRelease = 5;
inline void InitConfig_Audio::clear_levelslowrelease() {
  levelslowrelease_ = 0;
}
inline float InitConfig_Audio::_internal_levelslowrelease() const {
  return levelslowrelease_;
}
inline float InitConfig_Audio::levelslowrelease() const {
  // @@protoc_insertion_point(field_get:InitConfig.Audio.levelSlowRelease)
  return _internal_levelslowrelease();
}
inline void InitConfig_Audio::_internal_set_levelslowrelease(float value) {
  
  levelslowrelease_ = value;
}
inline void InitConfig_Audio::set_levelslowrelease(float value) {
  _internal_set_levelslowrelease(value);
  // @@protoc_insertion_point(field_set:InitConfig.Audio.levelSlowRelease)
}

// float levelFastAttack = 6;
inline void InitConfig_Audio::clear_levelfastattack() {
  levelfastattack_ = 0;
}
inline float InitConfig_Audio::_internal_levelfastattack() const {
  return levelfastattack_;
}
inline float InitConfig_Audio::levelfastattack() const {
  // @@protoc_insertion_point(field_get:InitConfig.Audio.levelFastAttack)
  return _internal_levelfastattack();
}
inline void InitConfig_Audio::_internal_set_levelfastattack(float value) {
  
  levelfastattack_ = value;
}
inline void InitConfig_Audio::set_levelfastattack(float value) {
  _internal_set_levelfastattack(value);
  // @@protoc_insertion_point(field_set:InitConfig.Audio.levelFastAttack)
}

// float levelFastRelease = 7;
inline void InitConfig_Audio::clear_levelfastrelease() {
  levelfastrelease_ = 0;
}
inline float InitConfig_Audio::_internal_levelfastrelease() const {
  return levelfastrelease_;
}
inline float InitConfig_Audio::levelfastrelease() const {
  // @@protoc_insertion_point(field_get:InitConfig.Audio.levelFastRelease)
  return _internal_levelfastrelease();
}
inline void InitConfig_Audio::_internal_set_levelfastrelease(float value) {
  
  levelfastrelease_ = value;
}
inline void InitConfig_Audio::set_levelfastrelease(float value) {
  _internal_set_levelfastrelease(value);
  // @@protoc_insertion_point(field_set:InitConfig.Audio.levelFastRelease)
}

// -------------------------------------------------------------------

// InitConfig_Opus

// int32 bitrate = 1;
inline void InitConfig_Opus::clear_bitrate() {
  bitrate_ = 0;
}
inline int32_t InitConfig_Opus::_internal_bitrate() const {
  return bitrate_;
}
inline int32_t InitConfig_Opus::bitrate() const {
  // @@protoc_insertion_point(field_get:InitConfig.Opus.bitrate)
  return _internal_bitrate();
}
inline void InitConfig_Opus::_internal_set_bitrate(int32_t value) {
  
  bitrate_ = value;
}
inline void InitConfig_Opus::set_bitrate(int32_t value) {
  _internal_set_bitrate(value);
  // @@protoc_insertion_point(field_set:InitConfig.Opus.bitrate)
}

// int32 frameSize = 2;
inline void InitConfig_Opus::clear_framesize() {
  framesize_ = 0;
}
inline int32_t InitConfig_Opus::_internal_framesize() const {
  return framesize_;
}
inline int32_t InitConfig_Opus::framesize() const {
  // @@protoc_insertion_point(field_get:InitConfig.Opus.frameSize)
  return _internal_framesize();
}
inline void InitConfig_Opus::_internal_set_framesize(int32_t value) {
  
  framesize_ = value;
}
inline void InitConfig_Opus::set_framesize(int32_t value) {
  _internal_set_framesize(value);
  // @@protoc_insertion_point(field_set:InitConfig.Opus.frameSize)
}

// int32 maxPacketSize = 3;
inline void InitConfig_Opus::clear_maxpacketsize() {
  maxpacketsize_ = 0;
}
inline int32_t InitConfig_Opus::_internal_maxpacketsize() const {
  return maxpacketsize_;
}
inline int32_t InitConfig_Opus::maxpacketsize() const {
  // @@protoc_insertion_point(field_get:InitConfig.Opus.maxPacketSize)
  return _internal_maxpacketsize();
}
inline void InitConfig_Opus::_internal_set_maxpacketsize(int32_t value) {
  
  maxpacketsize_ = value;
}
inline void InitConfig_Opus::set_maxpacketsize(int32_t value) {
  _internal_set_maxpacketsize(value);
  // @@protoc_insertion_point(field_set:InitConfig.Opus.maxPacketSize)
}

// int32 sampleRate = 4;
inline void InitConfig_Opus::clear_samplerate() {
  samplerate_ = 0;
}
inline int32_t InitConfig_Opus::_internal_samplerate() const {
  return samplerate_;
}
inline int32_t InitConfig_Opus::samplerate() const {
  // @@protoc_insertion_point(field_get:InitConfig.Opus.sampleRate)
  return _internal_samplerate();
}
inline void InitConfig_Opus::_internal_set_samplerate(int32_t value) {
  
  samplerate_ = value;
}
inline void InitConfig_Opus::set_samplerate(int32_t value) {
  _internal_set_samplerate(value);
  // @@protoc_insertion_point(field_set:InitConfig.Opus.sampleRate)
}

// int32 encodeRingLength = 5;
inline void InitConfig_Opus::clear_encoderinglength() {
  encoderinglength_ = 0;
}
inline int32_t InitConfig_Opus::_internal_encoderinglength() const {
  return encoderinglength_;
}
inline int32_t InitConfig_Opus::encoderinglength() const {
  // @@protoc_insertion_point(field_get:InitConfig.Opus.encodeRingLength)
  return _internal_encoderinglength();
}
inline void InitConfig_Opus::_internal_set_encoderinglength(int32_t value) {
  
  encoderinglength_ = value;
}
inline void InitConfig_Opus::set_encoderinglength(int32_t value) {
  _internal_set_encoderinglength(value);
  // @@protoc_insertion_point(field_set:InitConfig.Opus.encodeRingLength)
}

// int32 decodeRingLength = 6;
inline void InitConfig_Opus::clear_decoderinglength() {
  decoderinglength_ = 0;
}
inline int32_t InitConfig_Opus::_internal_decoderinglength() const {
  return decoderinglength_;
}
inline int32_t InitConfig_Opus::decoderinglength() const {
  // @@protoc_insertion_point(field_get:InitConfig.Opus.decodeRingLength)
  return _internal_decoderinglength();
}
inline void InitConfig_Opus::_internal_set_decoderinglength(int32_t value) {
  
  decoderinglength_ = value;
}
inline void InitConfig_Opus::set_decoderinglength(int32_t value) {
  _internal_set_decoderinglength(value);
  // @@protoc_insertion_point(field_set:InitConfig.Opus.decodeRingLength)
}

// -------------------------------------------------------------------

// InitConfig_Fec

// int32 symbolLen = 1;
inline void InitConfig_Fec::clear_symbollen() {
  symbollen_ = 0;
}
inline int32_t InitConfig_Fec::_internal_symbollen() const {
  return symbollen_;
}
inline int32_t InitConfig_Fec::symbollen() const {
  // @@protoc_insertion_point(field_get:InitConfig.Fec.symbolLen)
  return _internal_symbollen();
}
inline void InitConfig_Fec::_internal_set_symbollen(int32_t value) {
  
  symbollen_ = value;
}
inline void InitConfig_Fec::set_symbollen(int32_t value) {
  _internal_set_symbollen(value);
  // @@protoc_insertion_point(field_set:InitConfig.Fec.symbolLen)
}

// int32 sourceSymbolsPerBlock = 2;
inline void InitConfig_Fec::clear_sourcesymbolsperblock() {
  sourcesymbolsperblock_ = 0;
}
inline int32_t InitConfig_Fec::_internal_sourcesymbolsperblock() const {
  return sourcesymbolsperblock_;
}
inline int32_t InitConfig_Fec::sourcesymbolsperblock() const {
  // @@protoc_insertion_point(field_get:InitConfig.Fec.sourceSymbolsPerBlock)
  return _internal_sourcesymbolsperblock();
}
inline void InitConfig_Fec::_internal_set_sourcesymbolsperblock(int32_t value) {
  
  sourcesymbolsperblock_ = value;
}
inline void InitConfig_Fec::set_sourcesymbolsperblock(int32_t value) {
  _internal_set_sourcesymbolsperblock(value);
  // @@protoc_insertion_point(field_set:InitConfig.Fec.sourceSymbolsPerBlock)
}

// int32 repairSymbolsPerBlock = 3;
inline void InitConfig_Fec::clear_repairsymbolsperblock() {
  repairsymbolsperblock_ = 0;
}
inline int32_t InitConfig_Fec::_internal_repairsymbolsperblock() const {
  return repairsymbolsperblock_;
}
inline int32_t InitConfig_Fec::repairsymbolsperblock() const {
  // @@protoc_insertion_point(field_get:InitConfig.Fec.repairSymbolsPerBlock)
  return _internal_repairsymbolsperblock();
}
inline void InitConfig_Fec::_internal_set_repairsymbolsperblock(int32_t value) {
  
  repairsymbolsperblock_ = value;
}
inline void InitConfig_Fec::set_repairsymbolsperblock(int32_t value) {
  _internal_set_repairsymbolsperblock(value);
  // @@protoc_insertion_point(field_set:InitConfig.Fec.repairSymbolsPerBlock)
}

// -------------------------------------------------------------------

// InitConfig_Monitor

// int32 wsPort = 1;
inline void InitConfig_Monitor::clear_wsport() {
  wsport_ = 0;
}
inline int32_t InitConfig_Monitor::_internal_wsport() const {
  return wsport_;
}
inline int32_t InitConfig_Monitor::wsport() const {
  // @@protoc_insertion_point(field_get:InitConfig.Monitor.wsPort)
  return _internal_wsport();
}
inline void InitConfig_Monitor::_internal_set_wsport(int32_t value) {
  
  wsport_ = value;
}
inline void InitConfig_Monitor::set_wsport(int32_t value) {
  _internal_set_wsport(value);
  // @@protoc_insertion_point(field_set:InitConfig.Monitor.wsPort)
}

// -------------------------------------------------------------------

// InitConfig

// .InitConfig.Mode mode = 1;
inline void InitConfig::clear_mode() {
  mode_ = 0;
}
inline ::InitConfig_Mode InitConfig::_internal_mode() const {
  return static_cast< ::InitConfig_Mode >(mode_);
}
inline ::InitConfig_Mode InitConfig::mode() const {
  // @@protoc_insertion_point(field_get:InitConfig.mode)
  return _internal_mode();
}
inline void InitConfig::_internal_set_mode(::InitConfig_Mode value) {
  
  mode_ = value;
}
inline void InitConfig::set_mode(::InitConfig_Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:InitConfig.mode)
}

// repeated .InitConfig.Endpoint endpoints = 2;
inline int InitConfig::_internal_endpoints_size() const {
  return endpoints_.size();
}
inline int InitConfig::endpoints_size() const {
  return _internal_endpoints_size();
}
inline void InitConfig::clear_endpoints() {
  endpoints_.Clear();
}
inline ::InitConfig_Endpoint* InitConfig::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:InitConfig.endpoints)
  return endpoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InitConfig_Endpoint >*
InitConfig::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:InitConfig.endpoints)
  return &endpoints_;
}
inline const ::InitConfig_Endpoint& InitConfig::_internal_endpoints(int index) const {
  return endpoints_.Get(index);
}
inline const ::InitConfig_Endpoint& InitConfig::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:InitConfig.endpoints)
  return _internal_endpoints(index);
}
inline ::InitConfig_Endpoint* InitConfig::_internal_add_endpoints() {
  return endpoints_.Add();
}
inline ::InitConfig_Endpoint* InitConfig::add_endpoints() {
  ::InitConfig_Endpoint* _add = _internal_add_endpoints();
  // @@protoc_insertion_point(field_add:InitConfig.endpoints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InitConfig_Endpoint >&
InitConfig::endpoints() const {
  // @@protoc_insertion_point(field_list:InitConfig.endpoints)
  return endpoints_;
}

// .InitConfig.Mux mux = 3;
inline bool InitConfig::_internal_has_mux() const {
  return this != internal_default_instance() && mux_ != nullptr;
}
inline bool InitConfig::has_mux() const {
  return _internal_has_mux();
}
inline void InitConfig::clear_mux() {
  if (GetArenaForAllocation() == nullptr && mux_ != nullptr) {
    delete mux_;
  }
  mux_ = nullptr;
}
inline const ::InitConfig_Mux& InitConfig::_internal_mux() const {
  const ::InitConfig_Mux* p = mux_;
  return p != nullptr ? *p : reinterpret_cast<const ::InitConfig_Mux&>(
      ::_InitConfig_Mux_default_instance_);
}
inline const ::InitConfig_Mux& InitConfig::mux() const {
  // @@protoc_insertion_point(field_get:InitConfig.mux)
  return _internal_mux();
}
inline void InitConfig::unsafe_arena_set_allocated_mux(
    ::InitConfig_Mux* mux) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mux_);
  }
  mux_ = mux;
  if (mux) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InitConfig.mux)
}
inline ::InitConfig_Mux* InitConfig::release_mux() {
  
  ::InitConfig_Mux* temp = mux_;
  mux_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::InitConfig_Mux* InitConfig::unsafe_arena_release_mux() {
  // @@protoc_insertion_point(field_release:InitConfig.mux)
  
  ::InitConfig_Mux* temp = mux_;
  mux_ = nullptr;
  return temp;
}
inline ::InitConfig_Mux* InitConfig::_internal_mutable_mux() {
  
  if (mux_ == nullptr) {
    auto* p = CreateMaybeMessage<::InitConfig_Mux>(GetArenaForAllocation());
    mux_ = p;
  }
  return mux_;
}
inline ::InitConfig_Mux* InitConfig::mutable_mux() {
  ::InitConfig_Mux* _msg = _internal_mutable_mux();
  // @@protoc_insertion_point(field_mutable:InitConfig.mux)
  return _msg;
}
inline void InitConfig::set_allocated_mux(::InitConfig_Mux* mux) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mux_;
  }
  if (mux) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::InitConfig_Mux>::GetOwningArena(mux);
    if (message_arena != submessage_arena) {
      mux = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mux, submessage_arena);
    }
    
  } else {
    
  }
  mux_ = mux;
  // @@protoc_insertion_point(field_set_allocated:InitConfig.mux)
}

// .InitConfig.Audio audio = 4;
inline bool InitConfig::_internal_has_audio() const {
  return this != internal_default_instance() && audio_ != nullptr;
}
inline bool InitConfig::has_audio() const {
  return _internal_has_audio();
}
inline void InitConfig::clear_audio() {
  if (GetArenaForAllocation() == nullptr && audio_ != nullptr) {
    delete audio_;
  }
  audio_ = nullptr;
}
inline const ::InitConfig_Audio& InitConfig::_internal_audio() const {
  const ::InitConfig_Audio* p = audio_;
  return p != nullptr ? *p : reinterpret_cast<const ::InitConfig_Audio&>(
      ::_InitConfig_Audio_default_instance_);
}
inline const ::InitConfig_Audio& InitConfig::audio() const {
  // @@protoc_insertion_point(field_get:InitConfig.audio)
  return _internal_audio();
}
inline void InitConfig::unsafe_arena_set_allocated_audio(
    ::InitConfig_Audio* audio) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_);
  }
  audio_ = audio;
  if (audio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InitConfig.audio)
}
inline ::InitConfig_Audio* InitConfig::release_audio() {
  
  ::InitConfig_Audio* temp = audio_;
  audio_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::InitConfig_Audio* InitConfig::unsafe_arena_release_audio() {
  // @@protoc_insertion_point(field_release:InitConfig.audio)
  
  ::InitConfig_Audio* temp = audio_;
  audio_ = nullptr;
  return temp;
}
inline ::InitConfig_Audio* InitConfig::_internal_mutable_audio() {
  
  if (audio_ == nullptr) {
    auto* p = CreateMaybeMessage<::InitConfig_Audio>(GetArenaForAllocation());
    audio_ = p;
  }
  return audio_;
}
inline ::InitConfig_Audio* InitConfig::mutable_audio() {
  ::InitConfig_Audio* _msg = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:InitConfig.audio)
  return _msg;
}
inline void InitConfig::set_allocated_audio(::InitConfig_Audio* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete audio_;
  }
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::InitConfig_Audio>::GetOwningArena(audio);
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    
  } else {
    
  }
  audio_ = audio;
  // @@protoc_insertion_point(field_set_allocated:InitConfig.audio)
}

// .InitConfig.Opus opus = 5;
inline bool InitConfig::_internal_has_opus() const {
  return this != internal_default_instance() && opus_ != nullptr;
}
inline bool InitConfig::has_opus() const {
  return _internal_has_opus();
}
inline void InitConfig::clear_opus() {
  if (GetArenaForAllocation() == nullptr && opus_ != nullptr) {
    delete opus_;
  }
  opus_ = nullptr;
}
inline const ::InitConfig_Opus& InitConfig::_internal_opus() const {
  const ::InitConfig_Opus* p = opus_;
  return p != nullptr ? *p : reinterpret_cast<const ::InitConfig_Opus&>(
      ::_InitConfig_Opus_default_instance_);
}
inline const ::InitConfig_Opus& InitConfig::opus() const {
  // @@protoc_insertion_point(field_get:InitConfig.opus)
  return _internal_opus();
}
inline void InitConfig::unsafe_arena_set_allocated_opus(
    ::InitConfig_Opus* opus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(opus_);
  }
  opus_ = opus;
  if (opus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InitConfig.opus)
}
inline ::InitConfig_Opus* InitConfig::release_opus() {
  
  ::InitConfig_Opus* temp = opus_;
  opus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::InitConfig_Opus* InitConfig::unsafe_arena_release_opus() {
  // @@protoc_insertion_point(field_release:InitConfig.opus)
  
  ::InitConfig_Opus* temp = opus_;
  opus_ = nullptr;
  return temp;
}
inline ::InitConfig_Opus* InitConfig::_internal_mutable_opus() {
  
  if (opus_ == nullptr) {
    auto* p = CreateMaybeMessage<::InitConfig_Opus>(GetArenaForAllocation());
    opus_ = p;
  }
  return opus_;
}
inline ::InitConfig_Opus* InitConfig::mutable_opus() {
  ::InitConfig_Opus* _msg = _internal_mutable_opus();
  // @@protoc_insertion_point(field_mutable:InitConfig.opus)
  return _msg;
}
inline void InitConfig::set_allocated_opus(::InitConfig_Opus* opus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete opus_;
  }
  if (opus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::InitConfig_Opus>::GetOwningArena(opus);
    if (message_arena != submessage_arena) {
      opus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, opus, submessage_arena);
    }
    
  } else {
    
  }
  opus_ = opus;
  // @@protoc_insertion_point(field_set_allocated:InitConfig.opus)
}

// .InitConfig.Fec fec = 6;
inline bool InitConfig::_internal_has_fec() const {
  return this != internal_default_instance() && fec_ != nullptr;
}
inline bool InitConfig::has_fec() const {
  return _internal_has_fec();
}
inline void InitConfig::clear_fec() {
  if (GetArenaForAllocation() == nullptr && fec_ != nullptr) {
    delete fec_;
  }
  fec_ = nullptr;
}
inline const ::InitConfig_Fec& InitConfig::_internal_fec() const {
  const ::InitConfig_Fec* p = fec_;
  return p != nullptr ? *p : reinterpret_cast<const ::InitConfig_Fec&>(
      ::_InitConfig_Fec_default_instance_);
}
inline const ::InitConfig_Fec& InitConfig::fec() const {
  // @@protoc_insertion_point(field_get:InitConfig.fec)
  return _internal_fec();
}
inline void InitConfig::unsafe_arena_set_allocated_fec(
    ::InitConfig_Fec* fec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fec_);
  }
  fec_ = fec;
  if (fec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InitConfig.fec)
}
inline ::InitConfig_Fec* InitConfig::release_fec() {
  
  ::InitConfig_Fec* temp = fec_;
  fec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::InitConfig_Fec* InitConfig::unsafe_arena_release_fec() {
  // @@protoc_insertion_point(field_release:InitConfig.fec)
  
  ::InitConfig_Fec* temp = fec_;
  fec_ = nullptr;
  return temp;
}
inline ::InitConfig_Fec* InitConfig::_internal_mutable_fec() {
  
  if (fec_ == nullptr) {
    auto* p = CreateMaybeMessage<::InitConfig_Fec>(GetArenaForAllocation());
    fec_ = p;
  }
  return fec_;
}
inline ::InitConfig_Fec* InitConfig::mutable_fec() {
  ::InitConfig_Fec* _msg = _internal_mutable_fec();
  // @@protoc_insertion_point(field_mutable:InitConfig.fec)
  return _msg;
}
inline void InitConfig::set_allocated_fec(::InitConfig_Fec* fec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fec_;
  }
  if (fec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::InitConfig_Fec>::GetOwningArena(fec);
    if (message_arena != submessage_arena) {
      fec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fec, submessage_arena);
    }
    
  } else {
    
  }
  fec_ = fec;
  // @@protoc_insertion_point(field_set_allocated:InitConfig.fec)
}

// .InitConfig.Monitor monitor = 7;
inline bool InitConfig::_internal_has_monitor() const {
  return this != internal_default_instance() && monitor_ != nullptr;
}
inline bool InitConfig::has_monitor() const {
  return _internal_has_monitor();
}
inline void InitConfig::clear_monitor() {
  if (GetArenaForAllocation() == nullptr && monitor_ != nullptr) {
    delete monitor_;
  }
  monitor_ = nullptr;
}
inline const ::InitConfig_Monitor& InitConfig::_internal_monitor() const {
  const ::InitConfig_Monitor* p = monitor_;
  return p != nullptr ? *p : reinterpret_cast<const ::InitConfig_Monitor&>(
      ::_InitConfig_Monitor_default_instance_);
}
inline const ::InitConfig_Monitor& InitConfig::monitor() const {
  // @@protoc_insertion_point(field_get:InitConfig.monitor)
  return _internal_monitor();
}
inline void InitConfig::unsafe_arena_set_allocated_monitor(
    ::InitConfig_Monitor* monitor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(monitor_);
  }
  monitor_ = monitor;
  if (monitor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InitConfig.monitor)
}
inline ::InitConfig_Monitor* InitConfig::release_monitor() {
  
  ::InitConfig_Monitor* temp = monitor_;
  monitor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::InitConfig_Monitor* InitConfig::unsafe_arena_release_monitor() {
  // @@protoc_insertion_point(field_release:InitConfig.monitor)
  
  ::InitConfig_Monitor* temp = monitor_;
  monitor_ = nullptr;
  return temp;
}
inline ::InitConfig_Monitor* InitConfig::_internal_mutable_monitor() {
  
  if (monitor_ == nullptr) {
    auto* p = CreateMaybeMessage<::InitConfig_Monitor>(GetArenaForAllocation());
    monitor_ = p;
  }
  return monitor_;
}
inline ::InitConfig_Monitor* InitConfig::mutable_monitor() {
  ::InitConfig_Monitor* _msg = _internal_mutable_monitor();
  // @@protoc_insertion_point(field_mutable:InitConfig.monitor)
  return _msg;
}
inline void InitConfig::set_allocated_monitor(::InitConfig_Monitor* monitor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete monitor_;
  }
  if (monitor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::InitConfig_Monitor>::GetOwningArena(monitor);
    if (message_arena != submessage_arena) {
      monitor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monitor, submessage_arena);
    }
    
  } else {
    
  }
  monitor_ = monitor;
  // @@protoc_insertion_point(field_set_allocated:InitConfig.monitor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::InitConfig_Mode> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_init_2dconfig_2eproto
